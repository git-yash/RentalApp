type BookmarkedRental @model @auth(rules: [{allow: public}]) {
  id: ID!
  rental: Rental @hasOne
  userID: ID! @index(name: "byUser")
}

type Booking @model @auth(rules: [{allow: public}]) {
  id: ID!
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  rentalID: ID! @index(name: "byRental")
  userID: ID! @index(name: "byUser")
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  dateJoined: AWSDate!
  isOnline: Boolean!
  postedRentals: [Rental] @hasMany(indexName: "byUser", fields: ["id"])
  bookings: [Booking] @hasMany(indexName: "byUser", fields: ["id"])
  reviews: [Review] @hasMany(indexName: "byUser", fields: ["id"])
  bookmarks: [BookmarkedRental] @hasMany(indexName: "byUser", fields: ["id"])
}

type Review @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  description: String!
  rating: Float
  rentalID: ID! @index(name: "byRental")
  datePublished: AWSDateTime!
  userID: ID! @index(name: "byUser")
}

type Location {
  latitude: Float!
  longitude: Float!
}

type Address {
  street: String!
  street2: String
  city: String!
  state: String!
  zip: String!
  country: String!
}

enum TimeIncrement {
  HOUR
  WEEK
  MONTH
  DAY
}

type Price {
  amount: Int!
  timeIncrement: TimeIncrement!
  isFirmOnPrice: Boolean!
}

type Rental @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  description: String!
  isAvailable: Boolean
  prices: [Price!]!
  rating: Float
  address: Address!
  location: Location!
  reviews: [Review] @hasMany(indexName: "byRental", fields: ["id"])
  bookings: [Booking] @hasMany(indexName: "byRental", fields: ["id"])
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  category: Int!
}
 